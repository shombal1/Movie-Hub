networks:
  default:
    name: ${COMPOSE_PROJECT_NETWORK}
    #external: true


services:
  postgres-keycloak:
    image: 'postgres:17.0'
    container_name: ${COMPOSE_PROJECT_NAME}-postgres-keycloak
    ports:
      - '5432:5432'
    volumes:
      - postgres-keycloak:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_KEYCLOAK_USER_PASSWORD}
      POSTGRES_USER: ${POSTGRES_KEYCLOAK_USER}
      POSTGRES_DB: ${POSTGRES_KEYCLOAK_DB}
  
  keycloak:
    image: 'my-keycloak-kafka:new-local-2'
    build:
      context: ./keycloak/
    container_name: ${COMPOSE_PROJECT_NAME}-keycloak
    ports:
      - "8180:8080"
    command: [
      "start-dev",
      "--import-realm",
      "-Dkeycloak.profile.feature.upload_scripts=enabled",
      "--log-console-color=true",
    ]
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: ${COMPOSE_PROJECT_NAME}-postgres-keycloak
      KC_DB_URL_DATABASE: ${POSTGRES_KEYCLOAK_DB}
      KC_DB_USERNAME: ${POSTGRES_KEYCLOAK_USER}
      KC_DB_PASSWORD: ${POSTGRES_KEYCLOAK_USER_PASSWORD}
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_USER}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_USER_PASSWORD}
      KAFKA_TOPIC: ${KEYCLOAK_KAFKA_TOPIC}
      KAFKA_CLIENT_ID: keycloak
      KAFKA_EVENTS: REGISTER
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BROKER_CONTAINER}:29092
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm.json
    depends_on:
      - postgres-keycloak
  
  zookeeper:
    image: 'confluentinc/cp-zookeeper:7.6.0'
    container_name: ${COMPOSE_PROJECT_NAME}-zookeeper
    ports:
      - "2181:2181"
    volumes:
      - zookeeper:/var/lib/zookeeper/data
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: [ "CMD-SHELL", "zkServer.sh status" ]
      interval: 10s
      timeout: 5s
      retries: 3
  
  kafka-broker:
    image: 'confluentinc/cp-kafka:7.6.0'
    container_name: ${KAFKA_BROKER_CONTAINER}
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_BROKER_PORT}:9092"
      - "9101:9101"
    volumes:
      - kafka:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: ${COMPOSE_PROJECT_NAME}-zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_BROKER_CONTAINER}:29092,PLAINTEXT_HOST://localhost:9092
    healthcheck:
      test: [ "CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092" ]
      interval: 10s
      timeout: 5s
      retries: 3
  
  
  kafka-init:
    image: confluentinc/cp-kafka:7.6.0
    depends_on:
      kafka-broker:
        condition: service_healthy
    container_name: ${COMPOSE_PROJECT_NAME}-kafka-init
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...';
        until kafka-topics --bootstrap-server ${KAFKA_BROKER_CONTAINER}:29092 --list; do
          sleep 5;
        done;
      kafka-topics --bootstrap-server ${KAFKA_BROKER_CONTAINER}:29092 \
      --create \
      --topic ${KEYCLOAK_KAFKA_TOPIC} \
      --partitions 1 \
      --replication-factor 1 \
      --config retention.ms=604800000 \
      --config unclean.leader.election.enable=false \
      --if-not-exists
      
      kafka-topics --bootstrap-server ${KAFKA_BROKER_CONTAINER}:29092 \
      --create \
      --topic ${MINIO_NOTIFICATIONS_TOPIC} \
      --partitions 1 \
      --replication-factor 1 \
      --config retention.ms=604800000 \
      --config unclean.leader.election.enable=false \
      --if-not-exists;
        echo 'Topic initialized successfully'
      "
  
  kafka-ui:
    container_name: ${COMPOSE_PROJECT_NAME}-kafka-ui
    image: 'provectuslabs/kafka-ui:latest'
    ports:
      - 8082:8080
    depends_on:
      - kafka-broker
      - keycloak
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: ${KAFKA_BROKER_CONTAINER}:29092
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: keycloak-events-outbox
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://movie-hub-kafka-connect:8083
  
  
  jaeger:
    image: 'jaegertracing/all-in-one'
    container_name: ${COMPOSE_PROJECT_NAME}-jaeger
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: 9411
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - '6831:6831/udp'
      - '6832:6832/udp'
      - '5778:5778'
      - '16686:16686'
      - '4317:4317'
      - '4318:4318'
      - '14250:14250'
      - '14268:14268'
      - '14269:14269'
      - '9411:9411'
  
  opensearch:
    image: 'opensearchproject/opensearch:latest'
    container_name: ${COMPOSE_PROJECT_NAME}-opensearch
    environment:
      discovery.type: 'single-node'
      OPENSEARCH_INITIAL_ADMIN_PASSWORD: ${OPENSEARCH_ADMIN_PASSWORD}
      plugins.security.disabled: 'true'
    volumes:
      - opensearch:/usr/share/opensearch/data
    ports:
      - 9200:9200
      - 9600:9600
  
  opensearch-dashboards:
    image: 'opensearchproject/opensearch-dashboards:latest'
    container_name: ${COMPOSE_PROJECT_NAME}-opensearch-dashboards
    ports:
      - '5601:5601'
    expose:
      - "5601"
    environment:
      OPENSEARCH_HOSTS: '["http://${COMPOSE_PROJECT_NAME}-opensearch:9200"]'
      DISABLE_SECURITY_DASHBOARDS_PLUGIN: 'true'
  
  redis:
    image: "redis:latest"
    container_name: ${REDIS}
    ports:
      - ${REDIS_PORT}:6379
    volumes:
      - redis:/data
  
  minio:
    image: 'minio/minio:RELEASE.2025-04-08T15-41-24Z-cpuv1'
    container_name: ${COMPOSE_PROJECT_NAME}-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio:/data
    ports:
      - "${MINIO_API_PORT}:9000"
      - "${MINIO_WEB_CONSOLE_PORT}:9001"

  minio-init:
    image: 'minio/mc:RELEASE.2025-04-08T15-39-49Z-cpuv1'
    container_name: ${COMPOSE_PROJECT_NAME}-minio-init
    tty: true
    depends_on:
      - minio
      - kafka-broker
    entrypoint: >
      /bin/sh -c "
        set -e

        echo 'Waiting for MinIO...'
        until mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}; do
          echo 'MinIO is not ready. Retrying in 2s...'
          sleep 2
        done
        echo 'MinIO is ready.'

        echo 'Checking/creating bucket...'
        mc ls myminio/${MINIO_BUCKET} > /dev/null 2>&1 || mc mb myminio/${MINIO_BUCKET}

        echo 'Configuring publishing to Kafka...'
        mc admin config set myminio/ notify_kafka:1 \
          enable=true \
          brokers=${KAFKA_BROKER_CONTAINER}:29092 \
          topic=${MINIO_NOTIFICATIONS_TOPIC} \
          queue_dir=/data/events \
          queue_limit=100000 \
          retry_interval=5s \
          max_retries=15 \
          comment='Надежная доставка событий в Kafka'

        echo 'Applying configuration changes...'
        mc admin service restart myminio

        sleep 5

        echo 'Checking Kafka configuration:'
        mc admin config get myminio notify_kafka

        echo 'Assigning event bucket -> Kafka...'
        mc event remove myminio/\${MINIO_BUCKET} --event put --force
        mc event add myminio/\${MINIO_BUCKET} arn:minio:sqs::1:kafka --event put

        echo 'MinIO Kafka notification setup complete.'
      "
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: ${MINIO_BUCKET}
      KAFKA_BROKER_CONTAINER: ${KAFKA_BROKER_CONTAINER}
      MINIO_NOTIFICATIONS_TOPIC: ${MINIO_NOTIFICATIONS_TOPIC}



volumes:
  postgres-keycloak:
  opensearch:
  redis:
  kafka:
  zookeeper:
  minio: